import { GetServerSideProps } from "next";
import { <%= pascalSingularModelName %>, <%= camelCaseSingularModelName %>Metadata as modelMetadata, <%= pascalSingularModelName %>Metadata } from "@/db/models/<%= singularModelName %>";
import Link from "next/link";
import { getKnex } from "@/db";
import { useRouter } from 'next/router';

interface Show<%= pascalSingularModelName %>PageProps {
  <%= camelCaseSingularModelName %>: <%= pascalSingularModelName %>;
}

const Show<%= pascalSingularModelName %>Page = ({ <%= camelCaseSingularModelName %> }: Show<%= pascalSingularModelName %>PageProps) => {
  const router = useRouter();

  // Confirm deletion, then make request to delete endpoint
  const handleDelete = async () => {
    const confirmDelete = window.confirm('Are you sure you want to delete this <%= pascalSingularModelName %>?');
    if (confirmDelete) {
      try {
        const res = await fetch(`/api/<%= pluralModelName %>/destroy/${<%= camelCaseSingularModelName %>.id}`, { method: 'DELETE' });
        if (!res.ok) throw new Error('Delete failed');
        alert('<%= pascalSingularModelName %> deleted successfully');
        router.push('/<%= pluralModelName %>');
      } catch (error) {
        alert('An error occurred while deleting the <%= pascalSingularModelName %>.');
      }
    }
  };

  const fieldData = (Object.keys(modelMetadata) as Array<keyof <%= pascalSingularModelName %>Metadata>).map((field) => (
    <p key={field} className="my-5">
      <strong className="block font-medium mb-1">{modelMetadata[field].label}</strong>
      {<%= camelCaseSingularModelName %>[field] !== null && typeof <%= camelCaseSingularModelName %>[field] !== 'undefined' 
          ? typeof <%= camelCaseSingularModelName %>[field] === 'boolean'
            ? <%= camelCaseSingularModelName %>[field] ? "Yes" : "No"
            : String(<%= camelCaseSingularModelName %>[field])
          : ""}
    </p>
  ));

  return (
    <main className="container mx-auto mt-28 px-5 flex min-h-screen">
      <div className="mx-auto md:w-2/3 w-full flex">
        <div className="mx-auto">
          <div id="<%= singularModelName %>">
            {fieldData}
          </div>
            
          <Link href={`/<%= pluralModelName %>/${<%= camelCaseSingularModelName %>.id}/edit`} className="mt-2 rounded-lg py-3 px-5 bg-gray-100 inline-block font-medium">
            Edit this <%= pascalSingularModelName %>
          </Link>
        
          <div className="inline-block ml-2">
            <button onClick={handleDelete} className="mt-2 rounded-lg py-3 px-5 bg-gray-100 font-medium">
              Destroy this <%= pascalSingularModelName %>
            </button>
          </div>
          <Link href={`/<%= pluralModelName %>`} className="ml-2 rounded-lg py-3 px-5 bg-gray-100 inline-block font-medium">
            Back to <%= pascalPluralModelName %>
          </Link>
        </div>
      </div>
    </main>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const knex = getKnex();
  const <%= camelCaseSingularModelName %> = await knex('<%= pluralModelName %>').where('id', context.params?.id).first();

  if (!<%= camelCaseSingularModelName %>) {
    return {
      notFound: true,
    };
  }

  const serialized<%= pascalSingularModelName %> = {
    ...<%= camelCaseSingularModelName %>,
    created_at: <%= camelCaseSingularModelName %>.created_at?.toISOString(),
    updated_at: <%= camelCaseSingularModelName %>.updated_at?.toISOString(),
  };

  return {
    props: {
      <%= camelCaseSingularModelName %>: serialized<%= pascalSingularModelName %>,
    },
  };
};

export default Show<%= pascalSingularModelName %>Page;
