import { GetServerSideProps } from "next";
import { <%= modelName %>, <%= singularModelName %>Metadata as modelMetadata } from "@deps/db/models/<%= singularModelName %>";
import Link from "next/link";
import { getKnex } from "@deps/db";
import { useRouter } from 'next/router';

interface Show<%= PascalSingularModelName %>PageProps {
  <%= singularModelName %>: <%= modelName %>;
}

const Show<%= PascalSingularModelName %>Page = ({ <%= singularModelName %> }: Show<%= PascalSingularModelName %>PageProps) => {
  const router = useRouter();

  // Confirm deletion, then make request to delete endpoint
  const handleDelete = async () => {
    const confirmDelete = window.confirm('Are you sure you want to delete this <%= singularModelName %>?');
    if (confirmDelete) {
      try {
        const res = await fetch(`/api/<%= pluralModelName %>/destroy/${<%= singularModelName %>.id}`, { method: 'DELETE' });
        if (!res.ok) throw new Error('Delete failed');
        alert('<%= modelName %> deleted successfully');
        router.push('/<%= pluralModelName %>');
      } catch (error) {
        alert('An error occurred while deleting the <%= singularModelName %>.');
      }
    }
  };

  const fieldData = Object.keys(modelMetadata).map(field => (
    <p key={field} className="my-5">
      <strong class="block font-medium mb-1">{modelMetadata[field].label}</strong>
      {<%= singularModelName %>[field] !== null && typeof <%= singularModelName %>[field] !== 'undefined' 
          ? typeof <%= singularModelName %>[field] === 'boolean'
            ? <%= singularModelName %>[field] ? "Yes" : "No"
            : typeof <%= singularModelName %>[field] === 'date'
              ? new Date(<%= singularModelName %>[field]).toISOString() 
              : String(<%= singularModelName %>[field])
          : ""}
    </p>
  ));

  return (
    <div class="mx-auto md:w-2/3 w-full flex">
      <div class="mx-auto">
        <div id="<%= singularModelName %>">
          {fieldData}
        </div>
           
        <Link href={`/<%= pluralModelName %>/${<%= singularModelName %>.id}/edit`} className="mt-2 rounded-lg py-3 px-5 bg-gray-100 inline-block font-medium">
          Edit this <%= singularModelName %>
        </Link>
       
        <div class="inline-block ml-2">
          <button onClick={handleDelete} className="mt-2 rounded-lg py-3 px-5 bg-gray-100 font-medium">
            Destroy this <%= singularModelName %>
          </button>
        </div>
        <Link href={`/<%= pluralModelName %>`} className="ml-2 rounded-lg py-3 px-5 bg-gray-100 inline-block font-medium">
          Back to <%= pluralModelName %>
        </Link>
      </div>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const knex = getKnex();
  const <%= singularModelName %> = await knex('<%= pluralModelName %>').where('id', context.params?.id).first();

  if (!<%= singularModelName %>) {
    return {
      notFound: true,
    };
  }

  const serialized<%= modelName %> = {
    ...<%= singularModelName %>,
    created_at: <%= singularModelName %>.created_at?.toISOString(),
    updated_at: <%= singularModelName %>.updated_at?.toISOString(),
  };

  return {
    props: {
      <%= singularModelName %>: serialized<%= modelName %>,
    },
  };
};

export default Show<%= PascalSingularModelName %>Page;
