import type { NextApiRequest, NextApiResponse } from 'next';
import { getKnex } from '@deps/db';

const knex = getKnex();

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { method, query: { id } } = req;

  switch (method) {
    case 'GET':
      if (id) {
        const <%= singularModelName %> = await knex('<%= pluralModelName %>').where('id', id).first();
        res.status(200).json(<%= singularModelName %>);
      } else {
        const <%= pluralModelName %> = await knex('<%= pluralModelName %>');
        res.status(200).json(<%= pluralModelName %>);
      }
      break;

    case 'POST':
      const new<%= capitalizedSingularModelName %> = req.body;
      const [inserted<%= capitalizedSingularModelName %>] = await knex('<%= pluralModelName %>').insert(new<%= capitalizedSingularModelName %>).returning('*');
      res.status(201).json(inserted<%= capitalizedSingularModelName %>);
      break;

    case 'PUT':
    case 'PATCH':
      if (id) {
        const updated<%= capitalizedSingularModelName %> = req.body;
        const [updatedEntry] = await knex('<%= pluralModelName %>').where('id', id).update(updated<%= capitalizedSingularModelName %>).returning('*');
        res.status(200).json(updatedEntry);
      } else {
        res.status(400).json({message: 'Missing ID'});
      }
      break;

    case 'DELETE':
      if (id) {
        await knex('<%= pluralModelName %>').where('id', id).del();
        res.status(200).json({message: `<%= capitalizedSingularModelName %> with id ${id} deleted`});
      } else {
        res.status(400).json({message: 'Missing ID'});
      }
      break;

    default:
      res.setHeader('Allow', ['GET', 'POST', 'PUT', 'PATCH', 'DELETE']);
      res.status(405).end(`Method ${method} Not Allowed`);
  }
};