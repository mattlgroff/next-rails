import type { NextApiRequest, NextApiResponse } from 'next';
import { getCachedDbInstanceIfExist } from '@/db';
import <%= pascalSingularModelName %>Model, { <%= pascalSingularModelName %> } from '@/db/models/<%= singularModelName %>';

getCachedDbInstanceIfExist();

type ResponseType = <%= pascalSingularModelName %> | { message: string };

export default async function handler(req: NextApiRequest, res: NextApiResponse<ResponseType>) {
  // Check if request method is GET
  if (req.method !== 'GET') {
    return res.status(405).json({ message: 'Method not allowed. Use GET.' });
  }

  const id = req.query.id;
  if (!id) {
    return res.status(400).json({ message: 'Missing ID' });
  }

  try {
    const <%= camelCaseSingularModelName %> = await <%= pascalSingularModelName %>Model.query().findById(id);

    // If the <%= singularModelName %> with the given id doesn't exist, we return an error
    if (!<%= camelCaseSingularModelName %>) {
      return res.status(404).json({ message: `<%= pascalSingularModelName %> with id ${id} not found` });
    }

    // Everything went well
    return res.status(200).json(<%= camelCaseSingularModelName %>);
  } catch (error) {
    console.error(error);

    // Unexpected error
    return res.status(500).json({ message: 'An unexpected error occurred.' });
  }
}
