import { GetServerSideProps } from "next";
import { <%= modelName %>, <%= singularModelName %>Metadata as modelMetadata } from "@deps/db/models/<%= singularModelName %>";
import Link from "next/link";
import { getKnex } from "@deps/db";

interface <%= PascalPluralModelName %>PageProps {
  <%= pluralModelName %>: <%= modelName %>[];
}

const <%= PascalPluralModelName %>Page = ({ <%= pluralModelName %> }: <%= PascalPluralModelName %>PageProps) => {
  const fieldData = <%= pluralModelName %>.map(<%= singularModelName %> => (
    <tr key={<%= singularModelName %>.id}>
      <% fields.forEach(field => { %>
        <td className="whitespace-nowrap px-3 py-4 text-sm font-medium text-gray-900">
          { modelMetadata['<%= field %>'].label === 'ID'
            ? <Link className="text-blue-500" href={`/<%= pluralModelName %>/${<%= singularModelName %>.id}`}>{<%= singularModelName %>.<%= field %> !== null && typeof <%= singularModelName %>.<%= field %> !== 'undefined' ? String(<%= singularModelName %>.<%= field %>) : ""}</Link>
            : <%= singularModelName %>.<%= field %> !== null && typeof <%= singularModelName %>.<%= field %> !== 'undefined' 
              ? typeof <%= singularModelName %>.<%= field %> === 'boolean'
                ? <%= singularModelName %>.<%= field %> ? "Yes" : "No"
                : String(<%= singularModelName %>.<%= field %>)
              : ""
          }
        </td>
      <% }) %>
    </tr>
  ));

  return (
    <main className="container mx-auto mt-28 px-5 flex min-h-screen">
      <div className="w-full">
        <div className="flex justify-between items-center">
          <h1 className="font-bold text-4xl"><%= PascalPluralModelName %></h1>
          <Link href="/<%= pluralModelName %>/new" className="rounded-lg py-3 px-5 bg-blue-600 text-white block font-medium">New <%= singularModelName %></Link>
        </div>
      
        <div id="<%= pluralModelName %>" className="min-w-full">
          <table className="min-w-full divide-y divide-gray-300">
            <thead className="bg-gray-50">
              <tr>
                <% fields.forEach(field => { %>
                  <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                    <%= modelMetadata[field].label %>
                  </th>
                <% }) %>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200 bg-white">
              {fieldData}
            </tbody>
          </table>
        </div>
      </div>
    </main>
  );
};

export const getServerSideProps: GetServerSideProps = async () => {
  const knex = getKnex();
  const <%= pluralModelName %>FromKnex = await knex("<%= singularModelName %>s");
  const <%= pluralModelName %> = <%= pluralModelName %>FromKnex.map((<%= singularModelName %>: <%= modelName %>) => ({
    ...<%= singularModelName %>,
    created_at: <%= singularModelName %>.created_at?.toISOString(),
    updated_at: <%= singularModelName %>.updated_at?.toISOString(),
  }));

  return {
    props: {
      <%= pluralModelName %>,
    },
  };
};

export default <%= PascalPluralModelName %>Page;
