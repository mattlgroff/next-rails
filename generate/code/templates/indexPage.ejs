import fs from 'fs';
import path from 'path';
import { GetServerSideProps } from "next";
import <%= pascalSingularModelName %>Model, { <%= pascalSingularModelName %>, <%= camelCaseSingularModelName %>Metadata as modelMetadata } from "@/db/models/<%= singularModelName %>";
import Link from "next/link";
import { getCachedDbInstanceIfExist } from '@/db';

interface <%= pascalPluralModelName %>PageProps {
  <%= camelCasePluralModelName %>: <%= pascalSingularModelName %>[];
  tables: Record<string, string>;
}

const <%= pascalPluralModelName %>Page = ({ <%= camelCasePluralModelName %>, tables }: <%= pascalPluralModelName %>PageProps) => {
  const fieldData = <%= camelCasePluralModelName %>.map(<%= camelCaseSingularModelName %> => (
    <tr key={<%= camelCaseSingularModelName %>.id}>
      <% fields.forEach(field => { %>
        <td className="whitespace-nowrap px-3 py-4 text-sm font-medium text-gray-900">
          { modelMetadata['<%= field %>'].label === 'ID'
            ? <Link className="text-blue-500" href={`/<%= pluralModelName %>/${<%= camelCaseSingularModelName %>.id}`}>{<%= camelCaseSingularModelName %>.<%= field %> !== null && typeof <%= camelCaseSingularModelName %>.<%= field %> !== 'undefined' ? String(<%= camelCaseSingularModelName %>.<%= field %>) : ""}</Link>
            : <%= camelCaseSingularModelName %>.<%= field %> !== null && typeof <%= camelCaseSingularModelName %>.<%= field %> !== 'undefined' 
              ? typeof <%= camelCaseSingularModelName %>.<%= field %> === 'boolean'
                ? <%= camelCaseSingularModelName %>.<%= field %> ? "Yes" : "No"
                : String(<%= camelCaseSingularModelName %>.<%= field %>)
              : ""
          }
        </td>
      <% }) %>
    </tr>
  ));

  return (
    <div className="flex flex-col min-h-screen container">
      <nav className="flex items-center space-x-4 lg:space-x-6 m-6">
        <Link href="/" className="text-sm font-medium transition-colors hover:text-primary">
            home
        </Link>
        {Object.keys(tables).map((table) => (
          <Link href={`/${table}`} key={table} className="text-sm font-medium transition-colors hover:text-primary">
              {table}
          </Link>
        ))}
      </nav>
      <main className="container mx-auto px-5 flex min-h-screen">
        <div className="w-full">
          <div className="flex justify-between items-center">
            <h1 className="font-bold text-4xl"><%= pascalPluralModelName %></h1>
            <Link href="/<%= pluralModelName %>/new" className="rounded-lg py-3 px-5 bg-blue-600 text-white block font-medium">New <%= pascalSingularModelName %></Link>
          </div>
        
          <div id="<%= pluralModelName %>" className="min-w-full">
            <table className="min-w-full divide-y divide-gray-300">
              <thead className="bg-gray-50">
                <tr>
                  <% fields.forEach(field => { %>
                    <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                      <%= modelMetadata[field].label %>
                    </th>
                  <% }) %>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 bg-white">
                {fieldData}
              </tbody>
            </table>
          </div>
        </div>
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async () => {
  try {
    getCachedDbInstanceIfExist();
    const <%= camelCasePluralModelName %>Results = await <%= pascalSingularModelName %>Model.query();
    
    const <%= camelCasePluralModelName %> = <%= camelCasePluralModelName %>Results.map((<%= camelCaseSingularModelName %>: <%= pascalSingularModelName %>) => ({
      ...<%= camelCaseSingularModelName %>,
      created_at: <%= camelCaseSingularModelName %>.created_at?.toISOString(),
      updated_at: <%= camelCaseSingularModelName %>.updated_at?.toISOString(),
    }));

    const filePath = path.join(process.cwd(), 'src/db/schema.json');
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const tables = JSON.parse(fileContent);

    return {
      props: {
        <%= camelCasePluralModelName %>,
        tables,
      },
    };
  } catch (error) {
    console.error(error);
    return {
      props: {
        <%= camelCasePluralModelName %>: [],
        tables: {},
      },
    };
  }
};

export default <%= pascalPluralModelName %>Page;
