export interface <%- pascalSingularModelName %> {
  id: <%- idType %>;<% options.forEach((option) => { 
    const [name, type] = option.split(':');
  -%>

  <%- name %>: <%- typeMapping[type].ts %>;<% }); -%>
  created_at: Date;
  updated_at: Date;
}

export interface <%- pascalSingularModelName %>Metadata {
  id: { label: string; };
  <% options.forEach((option) => { const [name, type] = option.split(':'); %><%- name %>: { label: string; inputType: string; }; <% }); -%>
  created_at: { label: string; };
  updated_at: { label: string; };
}

export const <%- singularModelName %>Metadata: <%- pascalSingularModelName %>Metadata = {
  id: { label: 'ID' },<% options.forEach((option) => { const [name, type] = option.split(':');
     let inputType = 'text';
     switch (type) {
        case 'boolean':
          inputType = 'checkbox';
          break;
        case 'date':
          inputType = 'date';
          break;
        case 'number':
        case 'integer':
        case 'float':
        case 'decimal':
          inputType = 'number';
          break;
        case 'vector':
        case 'text':
          inputType = 'textarea';
          break;
        default:
          break;
     }
     if (name === 'email') {
        inputType = 'email';
     }
     if (name === 'password') {
        inputType = 'password';
     }
  %>
    <%- name %>: { label: '<%- toTitleCase(name) %>', inputType: '<%- inputType %>' }, <% }); -%>
  created_at: { label: 'Created At' },
  updated_at: { label: 'Updated At' },
};
