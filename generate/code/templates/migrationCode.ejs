exports.up = function (knex) {
  <%- firstLineOfMigration %>
    <% if (primaryKeyType === 'uuid') { %>
    table.uuid('id').primary().defaultTo(knex.raw('uuid_generate_v4()'));
    <% } else { %>
    table.increments('id');
    <% } %>
    <% options.forEach((option) => { 
       const [name, type] = option.split(':'); 
       if (type === 'references' || type === 'belongsTo') { 
         if (primaryKeyType === 'uuid') { %>
           table.uuid('<%= name %>_id');
         <% } else { %>
           table.integer('<%= name %>_id');
         <% } 
       } 
       if (type === 'vector') { %>
           table.specificType('<%= name %>', 'vector(1536)');
         <% } else if (type === 'string') { %>
           table.string('<%= name %>');
         <% } else { %>
           table.<%= typeMapping[type].db_column %>('<%= name %>');
         <% } 
    }); %>
    <% [...references, ...belongsTo].forEach((ref) => { 
       if (primaryKeyType === 'uuid') { %>
         table.uuid('<%= ref[0] %>_id');
       <% } else { %>
         table.integer('<%= ref[0] %>_id');
       <% } %>
       table.foreign('<%= ref[0] %>_id').references('id').inTable('<%= ref[1] %>');
    <% }); %>      
    table.timestamp('created_at').defaultTo(knex.fn.now());
    table.timestamp('updated_at').defaultTo(knex.fn.now());
  });
};

exports.down = function (knex) {
  return knex.schema.dropTable('<%= pluralModelName %>');
};
