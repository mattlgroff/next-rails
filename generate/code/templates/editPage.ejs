import { GetServerSideProps } from "next";
import { <%= PascalSingularModelName %>, <%= singularModelName %>Metadata as modelMetadata, <%= PascalSingularModelName %>Metadata } from "@/db/models/<%= singularModelName %>";
import Link from "next/link";
import { useRouter } from 'next/router'
import { getKnex } from '@/db';

interface Edit<%= PascalSingularModelName %>PageProps {
  <%= singularModelName %>: <%= PascalSingularModelName %>;
}

const Edit<%= PascalSingularModelName %>Page = ({ <%= singularModelName %> }: Edit<%= PascalSingularModelName %>PageProps) => {
  const router = useRouter();

  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const data = Object.fromEntries(formData.entries());

    const response = await fetch('/api/<%= pluralModelName %>/update/' + <%= singularModelName %>.id, {
      method: 'PUT',
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      router.push('/<%= pluralModelName %>');
    } else {
      const error = await response.json();
      
      alert(`There was a problem updating your <%= singularModelName %>. ${error.message}`);
    }
  }

  return (
    <main className="container mx-auto mt-28 px-5 flex min-h-screen">
      <div className="mx-auto md:w-2/3 w-full">
        <h1 className="font-bold text-4xl">Edit <%= singularModelName %></h1>

        <form onSubmit={onSubmit}>
          {
            (Object.keys(modelMetadata) as Array<keyof <%= PascalSingularModelName %>Metadata>).map(key => {
              if (key !== 'id' && key !== 'created_at' && key !== 'updated_at') {
                return (
                  <div key={key} className="my-5">
                    <label className="block text-gray-700 font-bold mb-2">{modelMetadata[key].label}</label>
                    {modelMetadata[key].inputType === 'checkbox' ? (
                      <input name={key} type={modelMetadata[key].inputType} checked={<%= singularModelName %>[key] as boolean} className="block shadow rounded-md border border-gray-200 outline-none px-3 py-2 mt-2 w-full" />
                    ) : (
                      <input name={key} type={modelMetadata[key].inputType} defaultValue={<%= singularModelName %>[key] as string} className="block shadow rounded-md border border-gray-200 outline-none px-3 py-2 mt-2 w-full" />
                    )}                
                  </div>
                )
              }
            })
          }
          <div className="inline">
            <button type="submit" className="rounded-lg py-3 px-5 bg-blue-600 text-white inline-block font-medium cursor-pointer">Update <%= singularModelName %></button>
          </div>
        </form>

        <Link href="/<%= pluralModelName %>" className="ml-2 rounded-lg py-3 px-5 bg-gray-100 inline-block font-medium">
          Back to <%= pluralModelName %>
        </Link>
      </div>
    </main>
  );
};

export const getServerSideProps: GetServerSideProps = async context => {
  const knex = getKnex();
  const <%= singularModelName %> = await knex('<%= pluralModelName %>').where('id', context.params?.id).first();

  if (!<%= singularModelName %>) {
      return {
          notFound: true,
      };
  }

  const serialized<%= PascalSingularModelName %> = {
      ...<%= singularModelName %>,
      created_at: <%= singularModelName %>.created_at?.toISOString(),
      updated_at: <%= singularModelName %>.updated_at?.toISOString(),
  };

  return {
      props: {
          <%= singularModelName %>: serialized<%= PascalSingularModelName %>,
      },
  };
};

export default Edit<%= PascalSingularModelName %>Page;